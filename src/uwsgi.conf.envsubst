[uwsgi]
# https://www.bloomberg.com/company/stories/configuring-uwsgi-production-deployment/
strict = true
master = true
enable-threads = true
chdir = ${MAPPROXY_HOME}
wsgi-file = ${MAPPROXY_HOME}/app.py
pidfile=/tmp/mapproxy.pid
socket = 0.0.0.0:8000
chmod-socket = 777

vacuum = true 
single-interpreter = true
die-on-term = true
need-app = true

disable-logging = true
log-4xx = true
log-5xx = true

harakiri = 60                        ; forcefully kill workers after 60 seconds
# py-callos-afterfork = true           ; allow workers to trap signals

auto-procname = true
procname-prefix = (mapproxy) 

max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60 

cheaper-algo = busyness              
processes = 500                      ; Maximum number of workers allowed
cheaper = 8                          ; Minimum number of workers allowed
cheaper-initial = 16                 ; Workers created at startup
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 16                    ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergegency workers to create if there are too many requests in the queue
